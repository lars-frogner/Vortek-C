#
# Usage:
# make <argument 1> <argument 2> ...
#
# Arguments:
# <none>:  Compiles with no compiler flags.
# debug:   Compiles with flags useful for debugging.
# fast:    Compiles with flags for high performance.
# clean:   Deletes auxiliary files.
#
# To compile with additional flags, add the argument
# EXTRA_FLAGS="<flags>"

# Compiler
CC = cc

ROOT_DIR = .#$(shell pwd)
EXECUTABLE = ${ROOT_DIR}/vortek.x
SRC_DIR = ${ROOT_DIR}/src
OBJ_DIR = ${ROOT_DIR}/obj
INCLUDE_DIR = ${ROOT_DIR}/include
EXTERNAL_DIR = ${ROOT_DIR}/external
DEP_DIR = ${ROOT_DIR}/.d

# Make sure required folders exist
$(shell mkdir -p $(OBJ_DIR) > /dev/null)
$(shell mkdir -p $(DEP_DIR) > /dev/null)

# Find all source files and create list of corresponding object files
SOURCE_FILES := $(shell find ${SRC_DIR} -name "*.c")
OBJECT_FILES := $(patsubst ${SRC_DIR}/%,${OBJ_DIR}/%,$(patsubst %.c,%.o,$(SOURCE_FILES)))

# Makes the compiler generate temporary dependency files (.Td) for each object file
DEP_FLAGS = -MT $@ -MMD -MP -MF $(DEP_DIR)/$*.Td

HEADER_PATH_FLAGS = -I${INCLUDE_DIR} -I${EXTERNAL_DIR}/include

LIBRARY_PATH_FLAGS = -L${EXTERNAL_DIR}/lib
LIBRARY_LINKING_FLAGS = -lglfw

COMPILATION_FLAGS =
LINKING_FLAGS =

DEBUGGING_COMPILE_FLAGS = -Og -W -Wall -fno-common -Wcast-align -Wredundant-decls -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wextra -Wconversion -pedantic -Wno-unused-parameter
DEBUGGING_LINK_FLAGS =

PERFORMANCE_COMPILE_FLAGS = -O3 -ffast-math

# Add operating system specific flags
ifeq ($(OS),Windows_NT)
	$(error This makefile does not support windows)
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)

	endif
	ifeq ($(UNAME_S),Darwin)
		COMPILATION_FLAGS 		:= $(COMPILATION_FLAGS) 	  -Wno-deprecated-declarations
		LINKING_FLAGS 			:= $(LINKING_FLAGS) 		  -framework OpenGL
		DEBUGGING_COMPILE_FLAGS := ${DEBUGGING_COMPILE_FLAGS} -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls
		DEBUGGING_LINK_FLAGS 	:= $(DEBUGGING_LINK_FLAGS) 	  -fsanitize=address
	endif
endif

# Command for compiling sources
COMPILE = $(CC) $(DEP_FLAGS) $(EXTRA_FLAGS) $(COMPILATION_FLAGS) $(HEADER_PATH_FLAGS)

# Command for linking object files
LINK = $(CC) $(EXTRA_FLAGS) $(LINKING_FLAGS) $(OBJECT_FILES) $(LIBRARY_PATH_FLAGS) $(LIBRARY_LINKING_FLAGS)

# Command for renaming temporary dependency files (.Td) generated by compiler
# to real dependency files (.d) and also touching the object file to make sure
# it is not reported as older than the corresponding dependency file
POSTCOMPILE = @mv -f $(DEP_DIR)/$*.Td $(DEP_DIR)/$*.d && touch $@

# Make sure certain rules are not activated by the presence of files
.PHONY: all debug fast set_debug_flags set_fast_flags clean superclean

# Define default target group
all: $(EXECUTABLE)

# Define optional target groups
debug: set_debug_flags $(EXECUTABLE)
fast: set_fast_flags $(EXECUTABLE)

# Action for removing all object files
clean:
	rm -f $(OBJECT_FILES)

# Action for removing all non-source files
superclean:
	rm -rf $(EXECUTABLE) ${DEP_DIR} $(OBJ_DIR) $(EXTERNAL_DIR)

# Defines appropriate compiler flags for debugging
set_debug_flags:
	$(eval COMPILATION_FLAGS = $(COMPILATION_FLAGS) $(DEBUGGING_COMPILE_FLAGS))
	$(eval LINKING_FLAGS = $(LINKING_FLAGS) $(DEBUGGING_LINK_FLAGS))

# Defines appropriate compiler flags for high performance
set_fast_flags:
	$(eval COMPILATION_FLAGS = $(COMPILATION_FLAGS) $(PERFORMANCE_COMPILE_FLAGS))

# Rule for linking object files
$(EXECUTABLE): $(EXTERNAL_DIR) $(OBJECT_FILES)
	${LINK} -o $@

# Rule for installing external dependencies
$(EXTERNAL_DIR):
	chmod +x install_externals.sh
	./install_externals.sh

# Rule for compiling sources
${OBJ_DIR}/%.o : ${SRC_DIR}/%.c $(DEP_DIR)/%.d
	$(COMPILE) -o $@ -c $<
	$(POSTCOMPILE)

# Empty rule for dependency files
$(DEP_DIR)/%.d: ;

# Prevent dependency files from being deleted
.PRECIOUS: $(DEP_DIR)/%.d

# Include rules from all dependency files
include $(wildcard $(patsubst %,$(DEP_DIR)/%.d,$(basename $(SOURCE_FILES))))
